#include <iostream>
#include <fstream>
#include <filesystem>
#include <string>
#include <vector>

using namespace std;

// Função para verificar se o GDB existe
bool checkGDBExists() {
    return filesystem::exists("C:\\msys64\\mingw64\\bin\\gdb.exe");
}

// Função para encontrar arquivos .cpp no diretório
vector<string> findCppFiles(const string& projectPath, const string& excludeFile = "") {
    vector<string> cppFiles;
    for (const auto& entry : filesystem::directory_iterator(projectPath)) {
        string filename = entry.path().filename().string();
        if (entry.path().extension() == ".cpp" && 
            filename != "config_generator.cpp" && 
            (excludeFile.empty() || filename != excludeFile)) {
            cppFiles.push_back(filename);
        }
    }
    return cppFiles;
}

// Função para criar diretório .vscode se não existir
void createVSCodeDir(const string& projectPath) {
    filesystem::path vscodePath = filesystem::path(projectPath) / ".vscode";
    if (!filesystem::exists(vscodePath)) {
        filesystem::create_directory(vscodePath);
    }
}

// Função para criar arquivo launch.json
void createLaunchJson(const string& projectPath, bool hasGDB) {
    ofstream file(filesystem::path(projectPath) / ".vscode" / "launch.json");
    
    if (hasGDB) {
        file << R"({
    "version": "0.2.0",
    "configurations": [
        {
            "name": "C/C++: g++.exe build and debug active file",
            "type": "cppdbg",
            "request": "launch",
            "program": "${fileDirname}\\${fileBasenameNoExtension}.exe",
            "args": [],
            "stopAtEntry": false,
            "cwd": "${fileDirname}",
            "environment": [],
            "externalConsole": false,
            "MIMode": "gdb",
            "miDebuggerPath": "C:\\msys64\\mingw64\\bin\\gdb.exe",
            "setupCommands": [
                {
                    "description": "Enable pretty-printing for gdb",
                    "text": "-enable-pretty-printing",
                    "ignoreFailures": true
                }
            ],
            "preLaunchTask": "C/C++: g++.exe build active file"
        },
        {
            "name": "C/C++: g++.exe build and run active file",
            "type": "cppdbg",
            "request": "launch",
            "program": "${fileDirname}\\${fileBasenameNoExtension}.exe",
            "args": [],
            "cwd": "${fileDirname}",
            "environment": [],
            "externalConsole": false,
            "MIMode": "none",
            "preLaunchTask": "C/C++: g++.exe build active file"
        }
    ]
})";
    } else {
        file << R"({
    "version": "0.2.0",
    "configurations": [
        {
            "name": "C/C++: g++.exe build active file",
            "type": "cppdbg",
            "request": "launch",
            "program": "${fileDirname}\\${fileBasenameNoExtension}.exe",
            "args": [],
            "cwd": "${fileDirname}",
            "environment": [],
            "externalConsole": false,
            "MIMode": "none",
            "preLaunchTask": "C/C++: g++.exe build active file"
        }
    ]
})";
    }
    file.close();
}

// Função para criar arquivo tasks.json
void createTasksJson(const string& projectPath, const string& excludeFile = "", bool isManualMode = false) {
    ofstream file(filesystem::path(projectPath) / ".vscode" / "tasks.json");
    
    // Encontra todos os arquivos .cpp no diretório (apenas se não for modo manual)
    vector<string> cppFiles;
    if (!isManualMode) {
        cppFiles = findCppFiles(projectPath, excludeFile);
    }
    
    // Cria a string de argumentos para compilação
    string args = R"(
                "-fdiagnostics-color=always",
                "-g",
                "${file}")";
    
    // Adiciona os outros arquivos .cpp se existirem e não for modo manual
    if (!isManualMode && !cppFiles.empty()) {
        for (const auto& cppFile : cppFiles) {
            args += ",\n                \"" + cppFile + "\"";
        }
    }
    
    // Adiciona as opções de saída
    args += R"(,
                "-o",
                "${fileDirname}\\${fileBasenameNoExtension}.exe")";
    
    file << R"({
    "tasks": [
        {
            "type": "cppbuild",
            "label": "C/C++: g++.exe build active file",
            "command": "C:\\msys64\\mingw64\\bin\\g++.exe",
            "args": [)" << args << R"(
            ],
            "options": {
                "cwd": "${fileDirname}"
            },
            "problemMatcher": [
                "$gcc"
            ],
            "group": {
                "kind": "build",
                "isDefault": true
            },
            "detail": "Task generated by Debugger."
        }
    ],
    "version": "2.0.0"
})";
    file.close();
}

int main(int argc, char* argv[]) {
    string projectPath;
    bool hasGDB = checkGDBExists();
    bool isManualMode = argc == 1; // Se não tiver argumentos, é modo manual
    
    if (isManualMode) {
        cout << "Digite o caminho do projeto (pressione Enter para usar o diretório atual): ";
        getline(cin, projectPath);
    } else {
        // No modo automático, usa o diretório atual
        projectPath = filesystem::current_path().string();
    }
    
    if (projectPath.empty()) {
        projectPath = filesystem::current_path().string();
    }
    
    try {
        createVSCodeDir(projectPath);
        createLaunchJson(projectPath, hasGDB);
        
        if (isManualMode) {
            // Modo manual: cria apenas os arquivos básicos
            createTasksJson(projectPath, "", true);
            cout << "\nArquivos de configuração criados com sucesso em: " << projectPath << "\\.vscode\\" << endl;
            cout << "- launch.json" << endl;
            cout << "- tasks.json" << endl;
        } else {
            // Modo automático: inclui outros arquivos .cpp
            string currentFile = argv[1]; // Nome do arquivo que está sendo compilado
            createTasksJson(projectPath, currentFile, false);
        }
        
        if (!hasGDB && isManualMode) {
            cout << "\nAviso: GDB não encontrado. A configuração de debug foi simplificada." << endl;
            cout << "Para ter debug completo, instale o GDB em: C:\\msys64\\mingw64\\bin\\gdb.exe" << endl;
        }
    }
    catch (const exception& e) {
        cout << "Erro ao criar arquivos: " << e.what() << endl;
        return 1;
    }
    
    return 0;
} 