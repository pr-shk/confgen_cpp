#include <iostream>
#include <fstream>
#include <filesystem>
#include <string>

using namespace std;

// Função para verificar se o GDB existe
bool checkGDBExists() {
    return filesystem::exists("C:\\msys64\\mingw64\\bin\\gdb.exe");
}

// Função para criar diretório .vscode se não existir
void createVSCodeDir(const string& projectPath) {
    filesystem::path vscodePath = filesystem::path(projectPath) / ".vscode";
    if (!filesystem::exists(vscodePath)) {
        filesystem::create_directory(vscodePath);
    }
}

// Função para criar arquivo launch.json
void createLaunchJson(const string& projectPath, bool hasGDB) {
    ofstream file(filesystem::path(projectPath) / ".vscode" / "launch.json");
    
    if (hasGDB) {
        file << R"({
    "version": "0.2.0",
    "configurations": [
        {
            "name": "C/C++: g++.exe build and debug active file",
            "type": "cppdbg",
            "request": "launch",
            "program": "${fileDirname}\\${fileBasenameNoExtension}.exe",
            "args": [],
            "stopAtEntry": false,
            "cwd": "${fileDirname}",
            "environment": [],
            "externalConsole": false,
            "MIMode": "gdb",
            "miDebuggerPath": "C:\\msys64\\mingw64\\bin\\gdb.exe",
            "setupCommands": [
                {
                    "description": "Enable pretty-printing for gdb",
                    "text": "-enable-pretty-printing",
                    "ignoreFailures": true
                }
            ],
            "preLaunchTask": "C/C++: g++.exe build active file"
        },
        {
            "name": "C/C++: g++.exe build and run active file",
            "type": "cppdbg",
            "request": "launch",
            "program": "${fileDirname}\\${fileBasenameNoExtension}.exe",
            "args": [],
            "cwd": "${fileDirname}",
            "environment": [],
            "externalConsole": false,
            "MIMode": "none",
            "preLaunchTask": "C/C++: g++.exe build active file"
        }
    ]
})";
    } else {
        file << R"({
    "version": "0.2.0",
    "configurations": [
        {
            "name": "C/C++: g++.exe build active file",
            "type": "cppdbg",
            "request": "launch",
            "program": "${fileDirname}\\${fileBasenameNoExtension}.exe",
            "args": [],
            "cwd": "${fileDirname}",
            "environment": [],
            "externalConsole": false,
            "MIMode": "none",
            "preLaunchTask": "C/C++: g++.exe build active file"
        }
    ]
})";
    }
    file.close();
}

// Função para criar arquivo tasks.json
void createTasksJson(const string& projectPath) {
    ofstream file(filesystem::path(projectPath) / ".vscode" / "tasks.json");
    file << R"({
    "tasks": [
        {
            "type": "cppbuild",
            "label": "C/C++: g++.exe build active file",
            "command": "C:\\msys64\\mingw64\\bin\\g++.exe",
            "args": [
                "-fdiagnostics-color=always",
                "-g",
                "${file}",
                "-o",
                "${fileDirname}\\${fileBasenameNoExtension}.exe"
            ],
            "options": {
                "cwd": "${fileDirname}"
            },
            "problemMatcher": [
                "$gcc"
            ],
            "group": {
                "kind": "build",
                "isDefault": true
            },
            "detail": "Task generated by Debugger."
        }
    ],
    "version": "2.0.0"
})";
    file.close();
}

int main() {
    string projectPath;
    bool hasGDB = checkGDBExists();
    
    cout << "Digite o caminho do projeto (pressione Enter para usar o diretório atual): ";
    getline(cin, projectPath);
    
    if (projectPath.empty()) {
        projectPath = filesystem::current_path().string();
    }
    
    try {
        createVSCodeDir(projectPath);
        createLaunchJson(projectPath, hasGDB);
        createTasksJson(projectPath);
        
        cout << "\nArquivos de configuração criados com sucesso em: " << projectPath << "\\.vscode\\" << endl;
        cout << "- launch.json" << endl;
        cout << "- tasks.json" << endl;
        
        if (!hasGDB) {
            cout << "\nAviso: GDB não encontrado. A configuração de debug foi simplificada." << endl;
            cout << "Para ter debug completo, instale o GDB em: C:\\msys64\\mingw64\\bin\\gdb.exe" << endl;
        }
    }
    catch (const exception& e) {
        cout << "Erro ao criar arquivos: " << e.what() << endl;
        return 1;
    }
    
    return 0;
} 